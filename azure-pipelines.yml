trigger:
  branches:
    include:     
      - master

pool:
  name: Default

stages:
- stage: Build
  displayName: 'Deply from Published Artifact'
  jobs:
  - job: CI
    displayName: 'Continuous Integration'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'  

    - script: dotnet restore
      displayName: 'Restore dependencies'

    - script: dotnet build --configuration Release
      displayName: 'Build application'

    - script: dotnet publish --configuration Release --output $(Build.ArtifactStagingDirectory)
      displayName: 'Publish Application'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: Container

- stage: DeployQA
  displayName: 'Deploy to QA'
  dependsOn: Build
  jobs:
  - job: CDQA
    displayName: 'Continuous Deployment to QA'
    steps:
    - download: current
      artifact: drop
      displayName: 'Download Build Artifacts'

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'  
    
    # - task: PowerShell@2
    #   displayName: 'Update appsettings.json for QA'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       $jsonPath = "$(Pipeline.Workspace)/drop/appsettings.json"
    #       $jsonContent = Get-Content $jsonPath -Raw
    #       Write-Host "Raw JSON content: $jsonContent"
    #       $jsonContent = $jsonContent -replace '//.*', ''
    #       $jsonContent = $jsonContent -replace '/\*[\s\S]*?\*/', ''

    #       Write-Host "Cleaned JSON content: $jsonContent"
          
    #       $json = $jsonContent | ConvertFrom-Json
    #       Write-Host "JSON object: $($json | ConvertTo-Json -Depth 32)"

    #       if ($json.NLog -and $json.NLog.targets -and $json.NLog.targets.fileTarget) {
    #           $json.NLog.targets.fileTarget.fileName = "Storage connection string"
    #       } else {
    #           Write-Host "Error: Path to fileName property is incorrect."
    #       }
    #       $json | ConvertTo-Json -Depth 32 | Set-Content $jsonPath

        

    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure Web App Deploy to QA'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'ADO_ServiceConnection'
        appType: 'webApp'
        WebAppName: 'webapp-apiqa-cc-fusionapi-001'
        package: '$(Pipeline.Workspace)/drop'

- stage: AutomationTestCasesOnQA
  displayName: "AutomationTest"
  jobs:
    - job: RunSmokeTest
      steps:
        - script: cd /d F:\DevOps\QA_Test_Automation && mvn clean test -Dgroups=Smoke,setUp -Dprod=api -Denv=devopsqa -Dtest=api.Api_TestCases.**
     

# - stage: DeployUAT
#   displayName: 'Deploy to UAT'
#   dependsOn: DeployQA
#   jobs:  
#   - deployment: 'DeploytoUAT'
#     displayName: 'DeployUAT'
#     environment: 'UAT'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - download: current
#               artifact: drop
#               displayName: 'Download Build Artifacts'           
    
     

#             - task: UseDotNet@2
#               displayName: 'Install .NET Core SDK'
#               inputs:
#                 packageType: 'sdk'
#                 version: '8.x'  

#             - task: AzureRmWebAppDeployment@4
#               displayName: 'Azure Web App Deploy to UAT'
#               inputs:
#                 ConnectionType: 'AzureRM'
#                 azureSubscription: 'Azure_DevOps_Service_Connection'
#                 appType: 'webApp'
#                 WebAppName: 'webapp-apiuat-cc-fusionapi-001'
#                 package: '$(Pipeline.Workspace)/drop/'

    



# trigger:
#   branches:
#     include:     
#       - main  

# pool:
#   name: Default

# stages:
# - stage: Build
#   displayName: 'Build, Test and Publish Artifact'
#   jobs:
#   - job: CI
#     displayName: 'Continuous Integration'
#     steps:
#     - task: UseDotNet@2
#       displayName: 'Install .NET Core sdk'
#       inputs:
#         packageType: 'sdk'
#         version: '8.x'  

#     - script: dotnet restore
#       displayName: 'Restore dependencies'

#     - script: dotnet build --configuration Release
#       displayName: 'Build application'

   
#     - script: dotnet publish --configuration Release --output $(Build.ArtifactStagingDirectory)
#       displayName: 'Publish Application'
    
   
     

#     # - task: DotNetCoreCLI@2
#     #   displayName: 'Publish Artifact'
#     #   inputs:
#     #     command: 'publish'
#     #     publishWebProjects: true
#     #     arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
#     #     zipAfterPublish: true
#     #     modifyOutputPath: true
#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish Build Artifacts'
#       inputs:
#         pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: 'drop'
#         publishLocation: Container

# - stage: Deploy
  # displayName: 'Deploy to Azure Web App'
  # dependsOn: Build
  # jobs:
  # - job: CD
  #   displayName: 'Continuous Deployment'
  #   steps:
  #   - download: current
  #     artifact: drop
  #     displayName: 'Download Build Artifacts'

  #   - task: UseDotNet@2
  #     displayName: 'Install .NET Core sdk'
  #     inputs:
  #       packageType: 'sdk'
        # version: '8.x'  

    # - task: DotNetCoreCLI@2
    #   displayName: 'Publish to Azure Web App'
    #   inputs:
    #     command: 'publish'
    #     publishWebProjects: true
    #     arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    #     zipAfterPublish: true

    # - task: AzureRmWebAppDeployment@4
    #   displayName: 'Azure Web App Deploy'
    #   inputs:
    #     ConnectionType: 'AzureRM'
    #     azureSubscription: 'Azure_DevOps_Service_Connection'
    #     appType: 'webApp'
    #     WebAppName: 'webapp-apiuat-cc-fusionapi-001'
    #     package: '$(Pipeline.Workspace)/drop'
    #     #deploymentMethod: 'zipDeploy'
        
    
























